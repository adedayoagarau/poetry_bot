name: Daily Poetry Bot - 10 Posts

on:
  schedule:
    # 10 posts per day - every ~2.4 hours (300 posts/month, well within 500 limit)
    - cron: '0 0 * * *'    # 12:00 AM UTC
    - cron: '24 2 * * *'   # 2:24 AM UTC  
    - cron: '48 4 * * *'   # 4:48 AM UTC
    - cron: '12 7 * * *'   # 7:12 AM UTC
    - cron: '36 9 * * *'   # 9:36 AM UTC
    - cron: '0 12 * * *'   # 12:00 PM UTC
    - cron: '24 14 * * *'  # 2:24 PM UTC
    - cron: '48 16 * * *'  # 4:48 PM UTC
    - cron: '12 19 * * *'  # 7:12 PM UTC
    - cron: '36 21 * * *'  # 9:36 PM UTC
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no actual posting)'
        type: boolean
        default: false

jobs:
  post-poetry:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Determine post time
      id: post-time
      run: |
        current_hour=$(date -u +%H)
        current_minute=$(date -u +%M)
        
        # Determine which of the 10 daily posts this is
        if [ "$current_hour" -eq "0" ] && [ "$current_minute" -eq "0" ]; then
          echo "post_type=midnight" >> $GITHUB_OUTPUT
          echo "post_number=1" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "2" ] && [ "$current_minute" -eq "24" ]; then
          echo "post_type=early_morning" >> $GITHUB_OUTPUT
          echo "post_number=2" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "4" ] && [ "$current_minute" -eq "48" ]; then
          echo "post_type=dawn" >> $GITHUB_OUTPUT
          echo "post_number=3" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "7" ] && [ "$current_minute" -eq "12" ]; then
          echo "post_type=morning" >> $GITHUB_OUTPUT
          echo "post_number=4" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "9" ] && [ "$current_minute" -eq "36" ]; then
          echo "post_type=mid_morning" >> $GITHUB_OUTPUT
          echo "post_number=5" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "12" ] && [ "$current_minute" -eq "0" ]; then
          echo "post_type=noon" >> $GITHUB_OUTPUT
          echo "post_number=6" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "14" ] && [ "$current_minute" -eq "24" ]; then
          echo "post_type=afternoon" >> $GITHUB_OUTPUT
          echo "post_number=7" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "16" ] && [ "$current_minute" -eq "48" ]; then
          echo "post_type=late_afternoon" >> $GITHUB_OUTPUT
          echo "post_number=8" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "19" ] && [ "$current_minute" -eq "12" ]; then
          echo "post_type=evening" >> $GITHUB_OUTPUT
          echo "post_number=9" >> $GITHUB_OUTPUT
        elif [ "$current_hour" -eq "21" ] && [ "$current_minute" -eq "36" ]; then
          echo "post_type=night" >> $GITHUB_OUTPUT
          echo "post_number=10" >> $GITHUB_OUTPUT
        else
          echo "post_type=manual" >> $GITHUB_OUTPUT
          echo "post_number=1" >> $GITHUB_OUTPUT
        fi
        
    - name: Run Twitter Poetry Bot
      env:
        # Twitter API credentials
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        
        # AI API keys (optional - include the ones you want to use)
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        
        # Post configuration
        POST_TYPE: ${{ steps.post-time.outputs.post_type }}
        POST_NUMBER: ${{ steps.post-time.outputs.post_number }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        
      run: |
        echo "üïê Running Twitter poetry excerpt post (#$POST_NUMBER)"
        echo "üìÖ Current time: $(date -u)"
        echo "üé≤ Using random selection (equal opportunity)"
        echo "üê¶ Twitter-only bot (Instagram separated)"
        
        if [ "$TEST_MODE" = "true" ]; then
          echo "üß™ Running in test mode"
          python test_locally.py
        else
          echo "üöÄ Running live Twitter poetry bot"
          python twitter_bot.py
        fi
        
    - name: Log execution
      if: always()
      run: |
        echo "‚úÖ Poetry bot execution completed"
        echo "üìä Post type: ${{ steps.post-time.outputs.post_type }}"
        echo "üî¢ Post number: ${{ steps.post-time.outputs.post_number }}"
        echo "üé≤ Selection: Random (equal opportunity)"
        echo "üìù Format: Poetry excerpt with link"
        echo "üìÖ Execution time: $(date -u)"
        
    # Optional: Upload logs as artifacts for debugging
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: poetry-bot-logs-${{ github.run_number }}
        path: |
          *.log
          *.txt
        retention-days: 7

# Workflow configuration notes:
# 
# Schedule Times (UTC):
# - 9:00 AM UTC = 4:00 AM EST / 1:00 AM PST (First daily post)
# - 9:00 PM UTC = 4:00 PM EST / 1:00 PM PST (Second daily post)
#
# To change posting times, modify the cron expressions above:
# Format: 'minute hour day month dayofweek'
# Example: '30 14 * * *' = 2:30 PM UTC daily
#
# Your bot will automatically:
# 1. Use random selection (equal opportunity for all poets)
# 2. Post 1-2 striking lines with attribution and link
# 3. Avoid repeating authors/sources on the same day  
# 4. Track daily limits for AI-generated content
# 5. Give preference to major poetry sources (3x probability)
# 6. Include links to full poems for engagement
#
# GitHub Secrets needed:
# - TWITTER_API_KEY
# - TWITTER_API_SECRET  
# - TWITTER_ACCESS_TOKEN
# - TWITTER_ACCESS_TOKEN_SECRET
# - GEMINI_API_KEY (recommended - free tier available)
# - OPENAI_API_KEY (optional)
# - CLAUDE_API_KEY (optional) 