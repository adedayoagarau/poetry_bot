name: Hourly Instagram Poetry Posts

on:
  schedule:
    # Post every hour on the hour (24 posts per day)
    - cron: '0 * * * *'
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no actual posting)'
        type: boolean
        default: false
      hour_override:
        description: 'Override hour for testing (0-23)'
        type: string
        default: ''

jobs:
  instagram-poetry:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install instagrapi
        
    - name: Determine post details
      id: post-details
      run: |
        if [ -n "${{ github.event.inputs.hour_override }}" ]; then
          current_hour="${{ github.event.inputs.hour_override }}"
        else
          current_hour=$(date -u +%H)
        fi
        
        # Calculate post number (1-24 for each hour)
        post_number=$((10#$current_hour + 1))
        
        echo "current_hour=$current_hour" >> $GITHUB_OUTPUT
        echo "post_number=$post_number" >> $GITHUB_OUTPUT
        echo "post_type=hourly_instagram" >> $GITHUB_OUTPUT
        
    - name: Run Instagram Poetry Bot
      env:
        # Instagram credentials
        INSTAGRAM_USERNAME: ${{ secrets.INSTAGRAM_USERNAME }}
        INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
        
        # AI API keys for content generation
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        
        # Post configuration
        POST_TYPE: ${{ steps.post-details.outputs.post_type }}
        POST_NUMBER: ${{ steps.post-details.outputs.post_number }}
        CURRENT_HOUR: ${{ steps.post-details.outputs.current_hour }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        INSTAGRAM_ONLY: "true"
        
      run: |
        echo "📱 Running hourly Instagram poetry post (#$POST_NUMBER)"
        echo "🕐 Current hour: $CURRENT_HOUR UTC"
        echo "📅 Current time: $(date -u)"
        echo "🎲 Using random selection for Instagram content"
        
        if [ "$TEST_MODE" = "true" ]; then
          echo "🧪 Running in test mode"
          python test_instagram.py
        else
          echo "🚀 Running live Instagram poetry bot"
          python instagram_bot.py
        fi
        
    - name: Log execution
      if: always()
      run: |
        echo "✅ Instagram poetry bot execution completed"
        echo "📊 Post type: ${{ steps.post-details.outputs.post_type }}"
        echo "🔢 Post number: ${{ steps.post-details.outputs.post_number }}"
        echo "🕐 Hour: ${{ steps.post-details.outputs.current_hour }} UTC"
        echo "🎲 Selection: Random poetry content"
        echo "📱 Platform: Instagram only"
        echo "📅 Execution time: $(date -u)"
        
    # Upload logs for debugging
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: instagram-bot-logs-${{ github.run_number }}
        path: |
          *.log
          *.txt
          *.jpg
          *.png
        retention-days: 3

# Workflow configuration notes:
# 
# Schedule: Every hour on the hour (0 * * * *)
# - This creates 24 posts per day, one every hour
# - Posts at: 00:00, 01:00, 02:00, ..., 23:00 UTC
#
# Instagram-specific features:
# - Square image format (1080x1080)
# - Poetry text overlaid on gradient background
# - Engaging captions with hashtags
# - Random poem selection from curated sources
# - AI-generated backup content if needed
#
# Required GitHub Secrets:
# - INSTAGRAM_USERNAME
# - INSTAGRAM_PASSWORD  
# - GEMINI_API_KEY (recommended for AI backup)
# - OPENAI_API_KEY (optional)
# - CLAUDE_API_KEY (optional)
#
# Note: Instagram may require app-specific passwords
# or manual login from the server IP first to avoid blocks 